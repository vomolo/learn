package main

import "fmt"

func main() {
	// Original string
	sentence := "  Go is    an open-source programming language   "

	// Splitting the string into a slice of words
	words := splitString(sentence)

	// Ranging over the slice of words
	// for index, word := range words {
	// 	fmt.Printf("Word %d: %s\n", index, word)
	// }

	res := joinWithSpaces(words)
	fmt.Println(res)
}

func splitString(str string) []string {

	var words []string
	var currentWord []rune

	for _, char := range str {
		if char == ' ' {
			if len(currentWord) > 0 {
				words = append(words, string(currentWord))
				currentWord = currentWord[:0]
			}
		} else {
			currentWord = append(currentWord, char)
		}
	}
	if len(currentWord) > 0 {
		words = append(words, string(currentWord))
	}

	return words
}

func joinWithSpaces(words []string) string {
	var result string

	// Join the words with three spaces
	for i, word := range words {
		if i > 0 {
			result += "   "
		}
		result += word
	}

	return result
}




reviseddd

package main

import "fmt"

func main() {
	str := "   to be or       not to be  .   "
	res1 := trim(str)
	res2 := space(res1)
	fmt.Println(res2)
}

func trim(s string) string {
	start := 0
	end := len(s) - 1

	for start < end && s[start] == ' ' {
		start++
	}

	for end > start && s[end] == ' ' {
		end--
	}

	return s[start : end+1]
}

func space(s string) string {
	res := ""
	flag := false

	for _, char := range s {
		if char == ' ' {
			flag = true
		} else {
			if flag {
				res += "  "
				flag = false
			}
			res += string(char)
		}
	}

	return res
}

